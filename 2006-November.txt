From dbenamy at mail.berlios.de  Tue Nov 28 20:22:35 2006
From: dbenamy at mail.berlios.de (dbenamy at BerliOS)
Date: Tue, 28 Nov 2006 20:22:35 +0100
Subject: [Cocoman-commits] r309 - trunk/backend
Message-ID: <200611281922.kASJMZtX021914@sheep.berlios.de>

Author: dbenamy
Date: 2006-11-28 20:22:34 +0100 (Tue, 28 Nov 2006)
New Revision: 309

Modified:
   trunk/backend/user.py
Log:
* Added TODO.
* Updated function comment.
* Cleanup.


Modified: trunk/backend/user.py
===================================================================
--- trunk/backend/user.py	2006-11-20 14:35:11 UTC (rev 308)
+++ trunk/backend/user.py	2006-11-28 19:22:34 UTC (rev 309)
@@ -23,6 +23,7 @@
         UserError.__init__(self, message or 'Could not create user')
 
 class InvalidNameError(UserCreationError):
+    # TODO Get rid of this?
     def __init__(self, message=None):
         UserCreationError.__init__(self, message)
     pass
@@ -40,12 +41,11 @@
     """Creates a new User. Writes an entry in users.txt for the new user. 
     Exceptions:
     If the specified name contains any characters other than letters, numbers, 
-    or spaces, raises an InvalidNameError.
-    If another user exists with this name, raises a TODO.
+    or spaces or a user with that name already exists, raises an 
+    InvalidNameError.
     
     """
     
-    # DONE: Validate name
     # Validating characters.
     invalid_chars = {}
     for c in name:



From whatah at mail.berlios.de  Tue Nov 28 23:10:13 2006
From: whatah at mail.berlios.de (whatah at mail.berlios.de)
Date: Tue, 28 Nov 2006 23:10:13 +0100
Subject: [Cocoman-commits] r310 - trunk/backend
Message-ID: <200611282210.kASMADAt007911@sheep.berlios.de>

Author: whatah
Date: 2006-11-28 23:10:11 +0100 (Tue, 28 Nov 2006)
New Revision: 310

Added:
   trunk/backend/executor.py
Log:
Added executor.py to the repo. executor.py is an idea about how to go about
doing process management and timeout watching. (Probably not a good one, though)


Added: trunk/backend/executor.py
===================================================================
--- trunk/backend/executor.py	2006-11-28 19:22:34 UTC (rev 309)
+++ trunk/backend/executor.py	2006-11-28 22:10:11 UTC (rev 310)
@@ -0,0 +1,64 @@
+#                       executor.py - Copyright Daniel Benamy, Natan Zohar
+# 
+# Licensed under the GPLv2
+# Concept for keeping a program from running over timeout length.
+
+import os
+import signal
+import subprocess
+import threading
+import time
+
+class TimeOutException(Exception):
+    pass
+
+def kill_after_timeout(proc, timeout):
+    while timeout > 0:
+        time.sleep(1)
+        if not proc.returncode is None:
+            return
+        timeout -= 1
+    #TODO: use the windows kill API if we are not on *nix or mac. 
+    os.kill(proc.pid, signal.SIGKILL)
+    proc.timeout = True
+    
+def execute(binary, data=None, timeout=3):
+    subproc = subprocess.Popen(binary, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
+    subproc.timeout = False
+
+    # write data into the process
+    # TODO: should we start the timeout timer before or after data is written to pipe?
+
+    # can raise an IOError if the process finishes before we hand it any data,
+    # keep that in mind.
+    if data:
+        data += "\000" # write the EOF character, just in case.
+        subproc.stdin.write(data)
+    
+    # start the kill timer.
+    killthread = threading.Thread(target=kill_after_timeout, args=[subproc, timeout])
+    killthread.start()
+
+    if not subproc.returncode:
+        subproc.wait()
+    
+    if subproc.timeout:
+        raise TimeOutException("Program '%s' timed out after %s seconds" % (binary, timeout))
+    
+    output = subproc.stdout.read()
+    return output
+
+if __name__ == "__main__":
+    try:
+        execute("true", timeout=5)
+    except TimeOutException, e:
+        print e
+    except IOError, e:
+        print "Process finished execution before we could hand it data"
+
+    try:
+        execute("yes", timeout=3)
+    except TimeOutException, e:
+        print e
+    except IOError, e:
+        print "Process finished execution before we could hand it data"



